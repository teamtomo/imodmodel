{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Read and write IMOD model files  as pandas dataframes  in Python.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#read-imod-models-as-pandas-dataframe","title":"Read IMOD models as pandas DataFrame","text":"<pre><code>import imodmodel\n\ndf = imodmodel.read('my_model_file.mod')\n</code></pre> <pre><code>In [3]: df.head()\nOut[3]: \n   object_id  contour_id          x          y     z\n0          0           0  64.333336  64.666664  80.0\n1          0           0  47.000000  77.333336  80.0\n2          0           0  51.333332  45.666668  80.0\n3          0           0  87.333336  49.666668  80.0\n4          0           0  76.000000  82.000000  80.0\n</code></pre>"},{"location":"#write-imod-models-from-a-pandas-dataframe","title":"Write IMOD models from a pandas DataFrame","text":"<pre><code>imodmodel.write(df, 'my_new_modelfile.mod')\n</code></pre> <p>That's it!</p>"},{"location":"#installation","title":"Installation","text":"<p><code>imodmodel</code> can be installed from the Python Package Index (PyPI)</p> <pre><code>pip install imodmodel\n</code></pre> <p>We recommend installing into a clean virtual environment.</p>"},{"location":"object_api/","title":"Object-based API","text":"<p><code>imodmodel.read()</code> and <code>imodmodel.write()</code> are convenient APIs for accessing information from contours or slicer angles from an IMOD model file. </p> <p><code>ImodModel</code> is a pydantic model for the data in a model file. A more complete set of the information in an IMOD model files can be accessed using the <code>ImodModel.from_file()</code> method.</p> <pre><code>from imodmodel import ImodModel\n\nmy_model = ImodModel.from_file(\"my_model_file.mod\")\n</code></pre> <pre><code>in [3]: my_model.model_field_set\nout[3]: \n{'id', 'extra', 'objects', 'slicer_angles', 'header'}\n</code></pre>"},{"location":"object_api/#my_modelid","title":"my_model.id","text":"<p><code>my_model.id</code> contains the IMOD file id and the version id</p> <pre><code>in [4]: my_model.id\nout[4]: \nID(IMOD_file_id='IMOD', version_id='V1.2')\n</code></pre>"},{"location":"object_api/#my_modelheader","title":"my_model.header","text":"<p><code>my_model.header</code> is contains the model structure data mainly used by IMOD.</p> <pre><code>in [5]: my_model.header\nout[5]:\nModelHeader(name='IMOD-NewModel', xmax=956, ymax=924, zmax=300, objsize=3, flags=62976, drawmode=1,\nmousemode=1, blacklevel=145, whitelevel=173, xoffset=0.0, yoffset=0.0, zoffset=0.0, xscale=1.0, yscale=10,\nzscale=1.0, object=2, contour=-1, point=-1, res=3, thresh=128, pixelsize=1.9733333587646484, units=-9,\ncsum=704518946, alpha=0.0, beta=0.0, gamma=0.0)\n</code></pre>"},{"location":"object_api/#my_modelobjects","title":"my_model.objects","text":"<p><code>my_model.objects</code> is a <code>list</code> IMOD objects.</p> <pre><code>in [6]: my_model.objects[0].header\nout[6]: \nObjectHeader(name='', extra_data=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], contsize=0,\nflags=402653184, axis=0, drawmode=1, red=0.0, green=1.0, blue=0.0, pdrawsize=0, symbol=1, symsize=3,\nlinewidth2=1, linewidth=1, linesty=0, symflags=0, sympad=0, trans=0, meshsize=0, surfsize=0)\n</code></pre> <p>This is where object values like contours, meshes, and IMAT information are located.</p> <pre><code>in [7]: my_model.objects[1].meshes[0].indices\nout[7]: \narray([[38, 40, 52],\n       [38, 52, 50],\n       [50, 52, 64],\n       [50, 64, 60],\n       ...,\n       [ 4, 10, 26],\n       [ 4, 26, 20],\n       [20, 26, 38],\n       [20, 38, 32]])\n</code></pre> <pre><code>in [8]: my_model.objects[1].imat\nout[8]: \nIMAT(ambient=102, diffuse=255, specular=127, shininess=4, fillred=0, fillgreen=0, fillblue=0,\nquality=0, mat2=0, valblack=0, valwhite=255, matflags2=0, mat3b3=0)\n</code></pre> <pre><code>in [9]: my_model.objects[1].contours[0].points\nout[9]:\narray([[367.00006104, 661.83343506, 134.        ],\n       [415.66674805, 667.83343506, 134.        ],\n       [474.33340454, 662.50012207, 134.        ]])\n</code></pre>"},{"location":"object_api/#my_modelslicer_angles","title":"my_model.slicer_angles","text":"<p><code>my_model.slicer_angles</code> is a <code>list</code> of slicer angles.</p> <pre><code>in [10]: my_model.slicer_angles[0]\nout[10]:\nSLAN(time=1, angles=(0.0, 0.0, 0.0), center=(533.5, 717.0, 126.0), label='\\x00')\n</code></pre>"},{"location":"slicer_angles/","title":"Slicer Angles","text":"<p>Slicer angles saved in the slicer window  are stored in the IMOD binary file with both centerpoints and angles.</p> <p>These annotations can be read in by setting <code>annotation='slicer_angle'</code> when calling <code>imodmodel.read()</code></p> <pre><code>import imodmodel\n\ndf = imodmodel.read('file_with_slicer_angles.mod', annotation='slicer_angles')\n</code></pre> <pre><code>In [3]: df.head()\nOut[3]:\n   object_id  slicer_angle_id  time      x_rot  y_rot      z_rot    center_x    center_y  center_z label\n0          0        0     1  13.100000    0.0 -30.200001  235.519577  682.744141     302.0\n0          0        1     1 -41.400002    0.0 -47.700001  221.942444  661.193237     327.0\n0          0        2     1 -41.400002    0.0 -41.799999  232.790726  671.332031     327.0\n0          0        3     1 -35.500000    0.0 -36.000000  240.129181  679.927795     324.0\n</code></pre>"},{"location":"z_coordinate_system_note/","title":"A note about 3dmod's coordinate system","text":"<p>Please note that 3dmod places (0,0,0) at the bottom left corner in XY planes, but in the center of the first Z-plane.</p> <p>For example, this code:</p> <pre><code>import imodmodel\nimport pandas as pd\nimport numpy as np\nimport mrcfile\n\ndf = pd.DataFrame(\n    {\n        \"x\": [0, 1, 2, 3],\n        \"y\": [0, 1, 2, 3],\n        \"z\": [0, 1, 2, 3],\n    }\n)\n\nvolume = np.zeros((4, 4, 4), dtype=np.float32)\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if (i + j + k) % 2 == 0:\n                volume[i, j, k] = 1.0\n\nmrcfile.write(\"co.mrc\", volume, overwrite=True)\nimodmodel.write(df, \"co.mod\")\n</code></pre> <p>results in the following:</p> The resulting position of points in XY slices The resulting position of (0,0,0) in XYZ slices <p>Since many other programs place (0,0,0) in the center of the first voxel, one might consider adding (0.5,0.5,0) to the coordinates before saving.</p>"},{"location":"examples/export_mesh/","title":"Export mesh","text":"In\u00a0[1]: Copied! <pre>from imodmodel import ImodModel\nfrom imodmodel.models import Mesh, Object\nimport trimesh\n</pre> from imodmodel import ImodModel from imodmodel.models import Mesh, Object import trimesh In\u00a0[\u00a0]: Copied! <pre>teapot = trimesh.load('data/teapot.obj')\n</pre> teapot = trimesh.load('data/teapot.obj') In\u00a0[\u00a0]: Copied! <pre>model = ImodModel()\nmodel.objects.append(Object())\nmodel.objects[0].meshes.append(Mesh())\nmodel.objects[0].meshes[0].vertices = teapot.vertices\nmodel.objects[0].meshes[0].indices = teapot.faces\n</pre> model = ImodModel() model.objects.append(Object()) model.objects[0].meshes.append(Mesh()) model.objects[0].meshes[0].vertices = teapot.vertices model.objects[0].meshes[0].indices = teapot.faces In\u00a0[4]: Copied! <pre>model.to_file('teapot.mod')\n</pre> model.to_file('teapot.mod')"},{"location":"examples/read_mesh/","title":"Read mesh","text":"In\u00a0[1]: Copied! <pre>from imodmodel import ImodModel\n</pre> from imodmodel import ImodModel In\u00a0[2]: Copied! <pre>model = ImodModel.from_file(\"../../tests/test_data/meshed_contour_example.mod\")\n</pre> model = ImodModel.from_file(\"../../tests/test_data/meshed_contour_example.mod\") In\u00a0[3]: Copied! <pre>import trimesh\nscene = trimesh.Scene()\nfor mesh in model.objects[0].meshes:\n    scene.add_geometry(trimesh.Trimesh(vertices=mesh.vertices, faces=mesh.indices))\nscene.show()\n</pre> import trimesh scene = trimesh.Scene() for mesh in model.objects[0].meshes:     scene.add_geometry(trimesh.Trimesh(vertices=mesh.vertices, faces=mesh.indices)) scene.show() Out[3]: In\u00a0[11]: Copied! <pre>model.objects[0].meshes[0].vertices[1]\n</pre> model.objects[0].meshes[0].vertices[1] Out[11]: <pre>array([525.01641846, 968.3092041 ,  -4.66856098])</pre> In\u00a0[10]: Copied! <pre>model.objects[0].meshes[0].normals[0]\n</pre> model.objects[0].meshes[0].normals[0] Out[10]: <pre>array([-2.15655327, -0.33435941, -4.25762367])</pre> In\u00a0[\u00a0]: Copied! <pre>import molecularnodes as mn\nimport databpy\nimport bpy\nmn.register()\nmn.template.install()\ncan = mn.Canvas()\ncan.scene_reset()\n\nobj = databpy.create_object(vertices=model.objects[0].meshes[0].vertices/10,faces=model.objects[0].meshes[0].indices)\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.shade_smooth()\ncan.frame_object(obj)\ncan.render_engine = \"EEVEE\"\ncan.resolution = (960, 540)\ncan.snapshot()\n</pre> import molecularnodes as mn import databpy import bpy mn.register() mn.template.install() can = mn.Canvas() can.scene_reset()  obj = databpy.create_object(vertices=model.objects[0].meshes[0].vertices/10,faces=model.objects[0].meshes[0].indices) bpy.ops.object.select_all(action='SELECT') bpy.ops.object.shade_smooth() can.frame_object(obj) can.render_engine = \"EEVEE\" can.resolution = (960, 540) can.snapshot() <pre>/home/elferich/Documents/imodmodel/.venv/lib64/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> <pre>Fra:1 Mem:61.75M (Peak 70.29M) | Time:00:01.37 | Rendering 1 / 64 samples\nFra:1 Mem:61.75M (Peak 70.29M) | Time:00:06.23 | Rendering 25 / 64 samples\nFra:1 Mem:61.75M (Peak 70.29M) | Time:00:11.66 | Rendering 50 / 64 samples\nFra:1 Mem:61.75M (Peak 70.29M) | Time:00:14.72 | Rendering 64 / 64 samples\nSaved: '/tmp/tmpr0kdw5w1/snapshot.png'\nTime: 00:14.91 (Saving: 00:00.17)\n\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/read_mesh/#render-with-trimesh","title":"Render with trimesh\u00b6","text":""},{"location":"examples/read_mesh/#render-using-blendermolecularnodes","title":"Render using Blender/MolecularNodes\u00b6","text":""},{"location":"examples/smiley/","title":"Smiley","text":"In\u00a0[1]: Copied! <pre>from imodmodel.models import ImodModel, Object, Contour, ObjectFlags, ObjectHeader\nimport numpy as np\n</pre> from imodmodel.models import ImodModel, Object, Contour, ObjectFlags, ObjectHeader import numpy as np In\u00a0[3]: Copied! <pre>model = ImodModel(\n    objects=[\n        Object(\n            color=(0.0,1.0,0.0),\n            header = ObjectHeader(\n                flags=ObjectFlags(\n                    scattered=True\n                    )\n                ),\n            contours = [\n                Contour(\n                    points= [\n                            [4.5,8.0,0.0],\n                            [9.0,8.0,0.0]\n                           ]\n                    \n                )\n            ]\n        ),\n        Object(\n            color=(0.0,0.0,1.0),\n            header=ObjectHeader(\n                pdrawsize=0\n            ),\n            contours=[\n                Contour(\n                    points = np.column_stack((6.75 + 6.75 * np.cos(np.linspace(0, 2 * np.pi, 200, endpoint=False)), 6.75 + 6.75 * np.sin(np.linspace(0, 2 * np.pi, 200, endpoint=False)), np.zeros(200)))\n                )\n            ]\n        ),\n        Object(\n            color=(1.0,0.0,0.0),\n            header=ObjectHeader(\n                pdrawsize=0,\n                flags=ObjectFlags(\n                    open=True\n                    )\n            ),\n            \n            contours=[\n                Contour(\n                    points = np.column_stack((6.75 + 4.75 * np.cos(np.linspace(1 * np.pi, 2 * np.pi, 100, endpoint=False)), 6.75 + 4.75 * np.sin(np.linspace( 1 * np.pi, 2 * np.pi, 100, endpoint=False)), np.zeros(100)))\n                )\n            ]\n        )\n    ]\n)\n</pre> model = ImodModel(     objects=[         Object(             color=(0.0,1.0,0.0),             header = ObjectHeader(                 flags=ObjectFlags(                     scattered=True                     )                 ),             contours = [                 Contour(                     points= [                             [4.5,8.0,0.0],                             [9.0,8.0,0.0]                            ]                                      )             ]         ),         Object(             color=(0.0,0.0,1.0),             header=ObjectHeader(                 pdrawsize=0             ),             contours=[                 Contour(                     points = np.column_stack((6.75 + 6.75 * np.cos(np.linspace(0, 2 * np.pi, 200, endpoint=False)), 6.75 + 6.75 * np.sin(np.linspace(0, 2 * np.pi, 200, endpoint=False)), np.zeros(200)))                 )             ]         ),         Object(             color=(1.0,0.0,0.0),             header=ObjectHeader(                 pdrawsize=0,                 flags=ObjectFlags(                     open=True                     )             ),                          contours=[                 Contour(                     points = np.column_stack((6.75 + 4.75 * np.cos(np.linspace(1 * np.pi, 2 * np.pi, 100, endpoint=False)), 6.75 + 4.75 * np.sin(np.linspace( 1 * np.pi, 2 * np.pi, 100, endpoint=False)), np.zeros(100)))                 )             ]         )     ] ) In\u00a0[20]: Copied! <pre>model.to_file(\"smiley.mod\")\n</pre> model.to_file(\"smiley.mod\")"}]}